#include "../include/bbuff.h"
#include <pthread.h>
#include <semaphore.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
void *buffer[BUFFER_SIZE];
int numOfCandies;
int in;
int out;
sem_t empty;
sem_t full;

typedef struct {
  int factory_num;
} candy_t;

void bbuff_init() {
  numOfCandies = 0;
  in = 0;
  out = 0;
  sem_init(&empty, 0, 0);
  sem_init(&full, 0, BUFFER_SIZE);
};

void bbuff_blocking_insert(void *item) { // ADD CANDY
  sem_wait(&full);
  pthread_mutex_lock(&mutex);
  buffer[in] = item;
  in = (in + 1) % BUFFER_SIZE;
  numOfCandies++;
  pthread_mutex_unlock(&mutex);
  sem_post(&empty);
}

void *bbuff_blocking_extract() {
  sem_wait(&empty);
  pthread_mutex_lock(&mutex);
  void *candy = buffer[out];
  numOfCandies--;
  out = (out + 1) % BUFFER_SIZE;
  pthread_mutex_unlock(&mutex);
  sem_post(&full);
  return candy;
}

_Bool bbuff_is_empty() { 
  if(numOfCandies==0)
    return true;
  return false;
}
